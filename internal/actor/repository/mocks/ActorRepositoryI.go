// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	models "intern/models"

	mock "github.com/stretchr/testify/mock"
)

// ActorRepositoryI is an autogenerated mock type for the ActorRepositoryI type
type ActorRepositoryI struct {
	mock.Mock
}

// Create provides a mock function with given fields: a
func (_m *ActorRepositoryI) Create(a *models.Actor) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Actor) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *ActorRepositoryI) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *ActorRepositoryI) Get(id int) (*models.Actor, error) {
	ret := _m.Called(id)

	var r0 *models.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Actor, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Actor); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMoviesByActor provides a mock function with given fields: id
func (_m *ActorRepositoryI) GetMoviesByActor(id int) ([]models.Movie, error) {
	ret := _m.Called(id)

	var r0 []models.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]models.Movie, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []models.Movie); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: a
func (_m *ActorRepositoryI) Update(a *models.Actor) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Actor) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewActorRepositoryI creates a new instance of ActorRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActorRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActorRepositoryI {
	mock := &ActorRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
