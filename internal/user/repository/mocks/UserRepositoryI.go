// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	models "intern/models"

	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryI is an autogenerated mock type for the UserRepositoryI type
type UserRepositoryI struct {
	mock.Mock
}

// GetByLoginAndPassword provides a mock function with given fields: login, password
func (_m *UserRepositoryI) GetByLoginAndPassword(login string, password string) (*models.User, error) {
	ret := _m.Called(login, password)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.User, error)); ok {
		return rf(login, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.User); ok {
		r0 = rf(login, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepositoryI creates a new instance of UserRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryI {
	mock := &UserRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
