// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	models "intern/models"

	mock "github.com/stretchr/testify/mock"
)

// MovieRepositoryI is an autogenerated mock type for the MovieRepositoryI type
type MovieRepositoryI struct {
	mock.Mock
}

// Create provides a mock function with given fields: m
func (_m *MovieRepositoryI) Create(m *models.Movie) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Movie) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *MovieRepositoryI) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *MovieRepositoryI) Get(id int) (*models.Movie, error) {
	ret := _m.Called(id)

	var r0 *models.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Movie, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Movie); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActorsByMovie provides a mock function with given fields: id
func (_m *MovieRepositoryI) GetActorsByMovie(id int) ([]models.Actor, error) {
	ret := _m.Called(id)

	var r0 []models.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]models.Actor, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []models.Actor); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMoviesByTitle provides a mock function with given fields: title
func (_m *MovieRepositoryI) GetMoviesByTitle(title string) ([]models.Movie, error) {
	ret := _m.Called(title)

	var r0 []models.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Movie, error)); ok {
		return rf(title)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Movie); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMoviesSorted provides a mock function with given fields: sortingColumn
func (_m *MovieRepositoryI) GetMoviesSorted(sortingColumn string) ([]models.Movie, error) {
	ret := _m.Called(sortingColumn)

	var r0 []models.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Movie, error)); ok {
		return rf(sortingColumn)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Movie); ok {
		r0 = rf(sortingColumn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sortingColumn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: m
func (_m *MovieRepositoryI) Update(m *models.Movie) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Movie) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMovieRepositoryI creates a new instance of MovieRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMovieRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MovieRepositoryI {
	mock := &MovieRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
